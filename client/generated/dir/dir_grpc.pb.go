// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: dir.proto

package dir

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DirService_UploadDir_FullMethodName = "/DirService/UploadDir"
	DirService_RenameDir_FullMethodName = "/DirService/RenameDir"
)

// DirServiceClient is the client API for DirService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirServiceClient interface {
	UploadDir(ctx context.Context, in *UploadDirReq, opts ...grpc.CallOption) (*UploadDirRes, error)
	RenameDir(ctx context.Context, in *RenameDirReq, opts ...grpc.CallOption) (*RenameDirRes, error)
}

type dirServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirServiceClient(cc grpc.ClientConnInterface) DirServiceClient {
	return &dirServiceClient{cc}
}

func (c *dirServiceClient) UploadDir(ctx context.Context, in *UploadDirReq, opts ...grpc.CallOption) (*UploadDirRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadDirRes)
	err := c.cc.Invoke(ctx, DirService_UploadDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirServiceClient) RenameDir(ctx context.Context, in *RenameDirReq, opts ...grpc.CallOption) (*RenameDirRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameDirRes)
	err := c.cc.Invoke(ctx, DirService_RenameDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirServiceServer is the server API for DirService service.
// All implementations must embed UnimplementedDirServiceServer
// for forward compatibility.
type DirServiceServer interface {
	UploadDir(context.Context, *UploadDirReq) (*UploadDirRes, error)
	RenameDir(context.Context, *RenameDirReq) (*RenameDirRes, error)
	mustEmbedUnimplementedDirServiceServer()
}

// UnimplementedDirServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDirServiceServer struct{}

func (UnimplementedDirServiceServer) UploadDir(context.Context, *UploadDirReq) (*UploadDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDir not implemented")
}
func (UnimplementedDirServiceServer) RenameDir(context.Context, *RenameDirReq) (*RenameDirRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameDir not implemented")
}
func (UnimplementedDirServiceServer) mustEmbedUnimplementedDirServiceServer() {}
func (UnimplementedDirServiceServer) testEmbeddedByValue()                    {}

// UnsafeDirServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirServiceServer will
// result in compilation errors.
type UnsafeDirServiceServer interface {
	mustEmbedUnimplementedDirServiceServer()
}

func RegisterDirServiceServer(s grpc.ServiceRegistrar, srv DirServiceServer) {
	// If the following call pancis, it indicates UnimplementedDirServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DirService_ServiceDesc, srv)
}

func _DirService_UploadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirServiceServer).UploadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirService_UploadDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirServiceServer).UploadDir(ctx, req.(*UploadDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirService_RenameDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirServiceServer).RenameDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirService_RenameDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirServiceServer).RenameDir(ctx, req.(*RenameDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DirService_ServiceDesc is the grpc.ServiceDesc for DirService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DirService",
	HandlerType: (*DirServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadDir",
			Handler:    _DirService_UploadDir_Handler,
		},
		{
			MethodName: "RenameDir",
			Handler:    _DirService_RenameDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dir.proto",
}
